name: Release

on: [push]

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build packages
        run: pnpm build

      - name: Check build outputs
        run: |
          ls -la packages/*/dist/ || true
          echo "Build completed successfully"

  semantic-release:
    needs: test-and-build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages (for dist/)
        run: pnpm build

      - name: Configure npm registry (GitHub Packages)
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---- TOKENS RELEASE ----
      - name: Sanitize dist/package.json (tokens)
        working-directory: packages/tokens/dist
        run: |
          # build a clean package.json for publish (read the source one one level up)
          node - <<'NODE'
          const fs = require('fs');
          const src = JSON.parse(fs.readFileSync('../package.json','utf8'));

          // keep only what you need to publish
          const keep = ['name','version','description','license','author','repository','bugs','homepage','keywords','type','exports','main','module','typings','types','files','publishConfig','engines','peerDependencies','dependencies','optionalDependencies'];
          const p = {};
          for (const k of keep) if (src[k] != null) p[k] = src[k];

          // drop dev-only
          delete p.devDependencies;
          delete p.scripts;

          // normalize workspace:*
          for (const sec of ['dependencies','peerDependencies','optionalDependencies']) {
            if (p[sec]) for (const d of Object.keys(p[sec])) {
              const v = String(p[sec][d] ?? '');
              if (v.startsWith('workspace:')) p[sec][d] = '*';
            }
          }

          // ensure files list (optional, but nice)
          if (!p.files) p.files = ['dist', '*.d.ts', '*.d.mts', '*.mjs', '*.js'];

          fs.writeFileSync('package.json', JSON.stringify(p, null, 2));
          NODE


      - name: Release Tokens Package
        working-directory: packages/tokens
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Read released tokens version
        id: tokens_ver
        run: echo "version=$(node -p \"require('./packages/tokens/dist/package.json').version\")" >> $GITHUB_OUTPUT

      # ---- CORE RELEASE ----
      - name: Sanitize dist/package.json (core)
        working-directory: packages/core/dist
        env:
          TOKENS_VERSION: ${{ steps.tokens_ver.outputs.version }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const tokensVersion = process.env.TOKENS_VERSION || '*';
          const src = JSON.parse(fs.readFileSync('../package.json','utf8'));

          const keep = ['name','version','description','license','author','repository','bugs','homepage','keywords','type','exports','main','module','typings','types','files','publishConfig','engines','peerDependencies','dependencies','optionalDependencies'];
          const p = {};
          for (const k of keep) if (src[k] != null) p[k] = src[k];

          delete p.devDependencies;
          delete p.scripts;

          for (const sec of ['dependencies','peerDependencies','optionalDependencies']) {
            if (p[sec]) for (const d of Object.keys(p[sec])) {
              const v = String(p[sec][d] ?? '');
              if (v.startsWith('workspace:')) {
                p[sec][d] = d === '@amir-kaman/sharmin-tokens' ? `^${tokensVersion}` : '*';
              }
            }
          }

          if (!p.files) p.files = ['dist', '*.d.ts', '*.d.mts', '*.mjs', '*.js'];

          fs.writeFileSync('package.json', JSON.stringify(p, null, 2));
          NODE


      - name: Release Core Package
        working-directory: packages/core
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  publish-stable-fallback:
    needs: [test-and-build, semantic-release]
    runs-on: ubuntu-latest
    if: ${{ always() && github.ref == 'refs/heads/master' && (needs.semantic-release.result == 'failure' || needs.semantic-release.result == 'cancelled') }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Remove any existing .npmrc
        run: rm -f .npmrc

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Configure npm registry
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish tokens (fallback)
        working-directory: packages/tokens
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p dist
          # sanitize dist/package.json
          node - <<'NODE'
          const fs = require('fs');
          const p = JSON.parse(fs.readFileSync('package.json','utf8'));
          delete p.devDependencies;
          delete p.scripts;
          for (const k of ['dependencies','peerDependencies','optionalDependencies']) {
            if (p[k]) for (const dep of Object.keys(p[k])) {
              const v = String(p[k][dep] ?? '');
              if (v.startsWith('workspace:')) p[k][dep] = '*';
            }
          }
          fs.writeFileSync('dist/package.json', JSON.stringify(p, null, 2));
          NODE
          # bump patch in dist
          npm version patch --prefix dist --no-git-tag-version
          pnpm publish ./dist --tag latest --no-git-checks

      - name: Read tokens version (fallback)
        id: tokens_ver_fb
        run: echo "version=$(node -p \"require('./packages/tokens/dist/package.json').version\")" >> $GITHUB_OUTPUT

      - name: Publish core (fallback)
        working-directory: packages/core
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TOKENS_VERSION: ${{ steps.tokens_ver_fb.outputs.version }}
        run: |
          mkdir -p dist
          # sanitize and inject tokens version
          node -e "process.env.TOKENS_VERSION=process.env.TOKENS_VERSION||'*'" - <<'NODE'
          const fs = require('fs');
          const tokensVersion = process.env.TOKENS_VERSION || '*';
          const p = JSON.parse(fs.readFileSync('package.json','utf8'));
          delete p.devDependencies;
          delete p.scripts;
          for (const k of ['dependencies','peerDependencies','optionalDependencies']) {
            if (p[k]) for (const dep of Object.keys(p[k])) {
              const v = String(p[k][dep] ?? '');
              if (v.startsWith('workspace:')) {
                p[k][dep] = dep === '@amir-kaman/sharmin-tokens'
                  ? `^${tokensVersion}`
                  : '*';
              }
            }
          }
          fs.writeFileSync('dist/package.json', JSON.stringify(p, null, 2));
          NODE
          npm version patch --prefix dist --no-git-tag-version
          pnpm publish ./dist --tag latest --no-git-checks
          echo "âœ… Fallback published tokens:${{ steps.tokens_ver_fb.outputs.version }} and core (patch)"

  publish-prerelease:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master'
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Remove any existing .npmrc
        run: rm -f .npmrc

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Configure npm registry
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish tokens (prerelease)
        working-directory: packages/tokens
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.run_id }}
        run: |
          mkdir -p dist
          node - <<'NODE'
          const fs = require('fs');
          const p = JSON.parse(fs.readFileSync('package.json','utf8'));
          delete p.devDependencies;
          delete p.scripts;
          for (const k of ['dependencies','peerDependencies','optionalDependencies']) {
            if (p[k]) for (const dep of Object.keys(p[k])) {
              const v = String(p[k][dep] ?? '');
              if (v.startsWith('workspace:')) p[k][dep] = '*';
            }
          }
          fs.writeFileSync('dist/package.json', JSON.stringify(p, null, 2));
          NODE
          npm version prerelease --prefix dist --preid $RUN_ID --no-git-tag-version
          pnpm publish ./dist --tag prerelease --no-git-checks

      - name: Read tokens version (prerelease)
        id: tokens_ver_pr
        run: echo "version=$(node -p \"require('./packages/tokens/dist/package.json').version\")" >> $GITHUB_OUTPUT

      - name: Publish core (prerelease)
        working-directory: packages/core
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.run_id }}
          TOKENS_VERSION: ${{ steps.tokens_ver_pr.outputs.version }}
        run: |
          mkdir -p dist
          node -e "process.env.TOKENS_VERSION=process.env.TOKENS_VERSION||'*'" - <<'NODE'
          const fs = require('fs');
          const tokensVersion = process.env.TOKENS_VERSION || '*';
          const p = JSON.parse(fs.readFileSync('package.json','utf8'));
          delete p.devDependencies;
          delete p.scripts;
          for (const k of ['dependencies','peerDependencies','optionalDependencies']) {
            if (p[k]) for (const dep of Object.keys(p[k])) {
              const v = String(p[k][dep] ?? '');
              if (v.startsWith('workspace:')) {
                p[k][dep] = dep === '@amir-kaman/sharmin-tokens'
                  ? `${tokensVersion}`
                  : '*';
              }
            }
          }
          fs.writeFileSync('dist/package.json', JSON.stringify(p, null, 2));
          NODE
          npm version prerelease --prefix dist --preid $RUN_ID --no-git-tag-version
          pnpm publish ./dist --tag prerelease --no-git-checks

