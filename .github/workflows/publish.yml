name: CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build packages
        run: pnpm build

      - name: Check build outputs
        run: |
          ls -la packages/*/dist/
          echo "Build completed successfully"

  # Publish Stable Release (master/main branch)
  publish-stable:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://npm.pkg.github.com/

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Configure npm registry
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish packages
        run: |
          # Publish tokens package
          cd packages/tokens
          if [ -f "dist/package.json" ]; then
            npm publish dist --tag latest
          else
            cp package.json dist/
            npm publish dist --tag latest
          fi
          cd ../..

          # Publish core package
          cd packages/core
          if [ -f "dist/package.json" ]; then
            npm publish dist --tag latest
          else
            cp package.json dist/
            npm publish dist --tag latest
          fi
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # Publish Prerelease (other branches)
  publish-prerelease:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://npm.pkg.github.com/

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Configure npm registry
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish prerelease packages
        run: |
          # Create prerelease version
          PRERELEASE_VERSION="0.0.0-pr.${{ github.run_number }}"

          # Publish tokens prerelease
          cd packages/tokens
          npm version $PRERELEASE_VERSION --no-git-tag-version
          if [ ! -f "dist/package.json" ]; then
            cp package.json dist/
          fi
          npm publish dist --tag prerelease
          cd ../..

          # Publish core prerelease
          cd packages/core
          # Update dependency version
          sed -i.bak "s/\"@amir-kaman\/sharmin-tokens\": \"workspace:\*\"/\"@amir-kaman\/sharmin-tokens\": \"$PRERELEASE_VERSION\"/" package.json
          npm version $PRERELEASE_VERSION --no-git-tag-version
          if [ ! -f "dist/package.json" ]; then
            cp package.json dist/
          fi
          npm publish dist --tag prerelease
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
