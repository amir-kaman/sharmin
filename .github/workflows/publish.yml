name: Release

on: [push]

jobs:
  # Keep your existing test-and-build job but make it reusable
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build packages
        run: pnpm build

      - name: Check build outputs
        run: |
          ls -la packages/*/dist/
          echo "Build completed successfully"

  # Semantic Release job
  semantic-release:
    needs: test-and-build
    # if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Create release directory
        run: mkdir -p release

      - name: Configure npm registry for semantic-release
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Tokens Package
        working-directory: packages/tokens
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .releaserc-npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .releaserc-npmrc
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Core Package
        working-directory: packages/core
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .releaserc-npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .releaserc-npmrc
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Root Release (Overall versioning)
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Keep your existing publish jobs but make them conditional on semantic-release
  publish-stable-fallback:
    needs: [test-and-build, semantic-release]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/master'  # Only if semantic-release fails
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Remove problematic .npmrc
        run: rm -f .npmrc

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Configure npm registry for publishing
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish packages (fallback)
        run: |
          # Publish tokens package with incremented version
          cd packages/tokens
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > ./dist/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> ./dist/.npmrc
          cp package.json ./dist/package.json
          
          # Get current version and increment patch
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION=$(node -p "require('semver').inc('$CURRENT_VERSION', 'patch')")
          npm version $NEW_VERSION --prefix dist --no-git-tag-version
          pnpm publish ./dist --tag latest --no-git-checks
          cd ../..
          
          # Publish core package with same version
          cd packages/core
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > ./dist/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> ./dist/.npmrc
          # Replace workspace dependency with actual version
          sed "s/\"@amir-kaman\/sharmin-tokens\": \"workspace:\*\"/\"@amir-kaman\/sharmin-tokens\": \"^$NEW_VERSION\"/" package.json > ./dist/package.json
          npm version $NEW_VERSION --prefix dist --no-git-tag-version
          pnpm publish ./dist --tag latest --no-git-checks
          
          echo "✅ Published fallback packages at version $NEW_VERSION"
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-prerelease:
    needs: test-and-build
    runs-on: ubuntu-latest
    # if: github.ref != 'refs/heads/master' && github.event.pull_request.merged != true
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Remove problematic .npmrc
        run: rm -f .npmrc

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Configure npm registry for publishing
        run: |
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish prerelease packages
        run: |
          # Publish tokens prerelease
          cd packages/tokens
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > ./dist/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> ./dist/.npmrc
          cp package.json ./dist/package.json
          npm version prerelease --prefix dist --preid ${{ github.run_id }}
          pnpm publish ./dist --tag prerelease --no-git-checks
          cd ../..

          # Get the version that was just published for tokens
          TOKENS_VERSION=$(node -p "require('./packages/tokens/dist/package.json').version")

          # Publish core prerelease
          cd packages/core
          echo "@amir-kaman:registry=https://npm.pkg.github.com/" > ./dist/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> ./dist/.npmrc
          # Replace workspace dependency with actual version
          sed "s/\"@amir-kaman\/sharmin-tokens\": \"workspace:\*\"/\"@amir-kaman\/sharmin-tokens\": \"$TOKENS_VERSION\"/" package.json > ./dist/package.json
          npm version prerelease --prefix dist --preid ${{ github.run_id }}
          pnpm publish ./dist --tag prerelease --no-git-checks

          echo "✅ Published prerelease packages with run_id: ${{ github.run_id }}"
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}